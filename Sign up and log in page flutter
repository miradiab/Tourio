// lib/main.dart
import 'dart:async';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';

void main() => runApp(const TourioApp());

class TourioApp extends StatelessWidget {
  const TourioApp({super.key});

  @override
  Widget build(BuildContext context) {
    const accent = Color(0xFFC03A2B);
    return MaterialApp(
      title: 'Tourio',
      debugShowCheckedModeBanner: false,
      theme: ThemeData(
        useMaterial3: true,
        colorScheme: ColorScheme.fromSeed(seedColor: accent),
        inputDecorationTheme: InputDecorationTheme(
          border: const OutlineInputBorder(
            borderRadius: BorderRadius.all(Radius.circular(12)),
          ),
          filled: true,
          fillColor: Colors.white.withOpacity(0.78),
          contentPadding:
              const EdgeInsets.symmetric(horizontal: 14, vertical: 12),
          labelStyle: const TextStyle(color: Colors.black87),
        ),
      ),
      routes: {
        '/intro': (_) => const IntroPage(),
        '/login': (_) => const LoginPage(),
        '/signup': (_) => const SignUpPage(),
        '/home': (_) => const HomePage(),
      },
      initialRoute: '/intro',
    );
  }
}

/* ─────────────────────────────  SHARED  ───────────────────────────── */

/// Background slideshow (1500ms/slide)
class SlideshowBackground extends StatefulWidget {
  const SlideshowBackground({super.key, required this.child});
  final Widget child;

  @override
  State<SlideshowBackground> createState() => _SlideshowBackgroundState();
}

class _SlideshowBackgroundState extends State<SlideshowBackground> {
  final List<String> _bgImages = const [
    'assets/images/deadsea.jpg',
    'assets/images/downtown_pic.jpg',
    'assets/images/nature_pic.jpg',
    'assets/images/petra_image.jpg',
    'assets/images/petra_lights.jpg',
    'assets/images/sad_il_malek_talal.jpg',
    'assets/images/stairtojabalamman.jpg', // make sure this filename exists
    'assets/images/wadi_rum.jpg',
    'assets/images/webdeh_pic.jpg',
  ];

  final _pageCtrl = PageController();
  Timer? _timer;
  int _index = 0;

  @override
  void initState() {
    super.initState();
    _timer = Timer.periodic(const Duration(milliseconds: 1500), (_) {
      if (!mounted) return;
      _index = (_index + 1) % _bgImages.length;
      _pageCtrl.animateToPage(
        _index,
        duration: const Duration(milliseconds: 550),
        curve: Curves.easeInOut,
      );
      setState(() {});
    });
  }

  @override
  void dispose() {
    _timer?.cancel();
    _pageCtrl.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Stack(
      children: [
        PageView.builder(
          controller: _pageCtrl,
          physics: const NeverScrollableScrollPhysics(),
          itemCount: _bgImages.length,
          itemBuilder: (_, i) => Container(
            decoration: BoxDecoration(
              image: DecorationImage(
                image: AssetImage(_bgImages[i]),
                fit: BoxFit.cover,
              ),
            ),
          ),
        ),
        // dark vignette
        Container(
          decoration: const BoxDecoration(
            gradient: LinearGradient(
              begin: Alignment.topCenter,
              end: Alignment.bottomCenter,
              colors: [Colors.black87, Colors.black54, Colors.black45],
            ),
          ),
        ),
        Positioned.fill(child: widget.child),
      ],
    );
  }
}

/// Your combined logo image (EN + star + AR) centered horizontally.
class TourioLogo extends StatelessWidget {
  const TourioLogo({super.key, this.width = 260, this.dy = 0});
  final double width;
  final double dy; // vertical nudge

  @override
  Widget build(BuildContext context) {
    return Center(
      child: Transform.translate(
        offset: Offset(0, dy),
        child: Image.asset(
          'assets/images/star.jpg', // full wordmark logo
          width: width,
          fit: BoxFit.contain,
        ),
      ),
    );
  }
}

/// Frosted translucent button with red text
class FrostButton extends StatelessWidget {
  const FrostButton({super.key, required this.onPressed, required this.label});
  final VoidCallback onPressed;
  final String label;

  @override
  Widget build(BuildContext context) {
    const accent = Color(0xFFC03A2B);
    return SizedBox(
      height: 46,
      width: double.infinity,
      child: ElevatedButton(
        onPressed: onPressed,
        style: ElevatedButton.styleFrom(
          backgroundColor: Colors.white.withOpacity(0.78),
          foregroundColor: accent,
          elevation: 0,
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
        ),
        child: Text(label, style: const TextStyle(fontWeight: FontWeight.w800, letterSpacing: 0.5)),
      ),
    );
  }
}

/// Obscured text field with show/hide toggle
class _ObscuredTextField extends StatefulWidget {
  const _ObscuredTextField({
    required this.controller,
    required this.label,
    this.textColor,
    this.fill,
    this.validator,
    super.key,
  });

  final TextEditingController controller;
  final String label;
  final Color? textColor;
  final Color? fill;
  final String? Function(String?)? validator;

  @override
  State<_ObscuredTextField> createState() => _ObscuredTextFieldState();
}

class _ObscuredTextFieldState extends State<_ObscuredTextField> {
  bool _obscure = true;

  @override
  Widget build(BuildContext context) {
    return TextFormField(
      controller: widget.controller,
      obscureText: _obscure,
      validator: widget.validator,
      style: TextStyle(color: widget.textColor),
      decoration: InputDecoration(
        labelText: widget.label,
        labelStyle: widget.textColor != null
            ? TextStyle(color: widget.textColor!.withOpacity(0.8))
            : null,
        fillColor: widget.fill,
        suffixIcon: IconButton(
          onPressed: () => setState(() => _obscure = !_obscure),
          icon: Icon(_obscure ? Icons.visibility_off : Icons.visibility),
          color: widget.textColor ?? Colors.black87,
        ),
      ),
    );
  }
}

/* ─────────────────────────────  INTRO  ───────────────────────────── */

class IntroPage extends StatefulWidget {
  const IntroPage({super.key});
  @override
  State<IntroPage> createState() => _IntroPageState();
}

class _IntroPageState extends State<IntroPage> {
  @override
  void initState() {
    super.initState();
    Future.delayed(const Duration(milliseconds: 1800), () {
      if (mounted) Navigator.pushReplacementNamed(context, '/login');
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: SlideshowBackground(
        child: SafeArea(
          child: Padding(
            padding: const EdgeInsets.only(top: 48.0),
            child: const TourioLogo(width: 280, dy: 8),
          ),
        ),
      ),
    );
  }
}

/* ─────────────────────────────  LOGIN  ───────────────────────────── */

class LoginPage extends StatefulWidget {
  const LoginPage({super.key});
  @override
  State<LoginPage> createState() => _LoginPageState();
}

class _LoginPageState extends State<LoginPage> {
  final _emailCtrl = TextEditingController();
  final _pwCtrl = TextEditingController();

  @override
  void dispose() {
    _emailCtrl.dispose();
    _pwCtrl.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    const fieldWidth = 320.0;

    return Scaffold(
      body: SlideshowBackground(
        child: SafeArea(
          child: Stack(
            children: [
              Align(
                alignment: Alignment.topLeft,
                child: IconButton(
                  icon: const Icon(Icons.arrow_back, color: Colors.white),
                  onPressed: () =>
                      Navigator.pushReplacementNamed(context, '/intro'),
                ),
              ),
              Center(
                child: SingleChildScrollView(
                  padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 16),
                  child: Column(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      const TourioLogo(width: 260),
                      const SizedBox(height: 28),
                      ConstrainedBox(
                        constraints: const BoxConstraints(maxWidth: fieldWidth),
                        child: Column(
                          children: [
                            TextField(
                              controller: _emailCtrl,
                              keyboardType: TextInputType.emailAddress,
                              decoration: const InputDecoration(labelText: 'Username/Email'),
                            ),
                            const SizedBox(height: 12),
                            _ObscuredTextField(controller: _pwCtrl, label: 'Password'),
                            const SizedBox(height: 18),
                            FrostButton(
                              onPressed: () => Navigator.pushReplacementNamed(context, '/home'),
                              label: 'LOG IN',
                            ),
                            const SizedBox(height: 12),
                            FrostButton(
                              onPressed: () => Navigator.pushNamed(context, '/signup'),
                              label: 'SIGN UP',
                            ),
                          ],
                        ),
                      ),
                    ],
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

/* ─────────────────────────────  SIGN UP with DOB (DD / MM / YYYY) ───────────────────────────── */

class SignUpPage extends StatefulWidget {
  const SignUpPage({super.key});
  @override
  State<SignUpPage> createState() => _SignUpPageState();
}

class _SignUpPageState extends State<SignUpPage> {
  final _formKey = GlobalKey<FormState>();
  final _usernameCtrl = TextEditingController();
  final _emailCtrl = TextEditingController();
  final _pwCtrl = TextEditingController();

  // DOB fields
  final _dayCtrl = TextEditingController();
  final _monthCtrl = TextEditingController();
  final _yearCtrl = TextEditingController();
  final _dayNode = FocusNode();
  final _monthNode = FocusNode();
  final _yearNode = FocusNode();

  String? _dobError;

  @override
  void dispose() {
    _usernameCtrl.dispose();
    _emailCtrl.dispose();
    _pwCtrl.dispose();
    _dayCtrl.dispose();
    _monthCtrl.dispose();
    _yearCtrl.dispose();
    _dayNode.dispose();
    _monthNode.dispose();
    _yearNode.dispose();
    super.dispose();
  }

  String? _validateEmail(String? v) {
    if (v == null || v.trim().isEmpty) return 'Email is required';
    final re = RegExp(r'^[\w\.\-]+@([\w\-]+\.)+[a-zA-Z]{2,}$');
    if (!re.hasMatch(v.trim())) return 'Enter a valid email';
    return null;
  }

  String? _validateUsername(String? v) {
    if (v == null || v.trim().isEmpty) return 'Username is required';
    if (v.trim().length < 3) return 'Username must be at least 3 characters';
    return null;
  }

  String? _validatePassword(String? v) {
    if (v == null || v.isEmpty) return 'Password is required';
    final hasMin = v.length >= 8;
    final hasSymbol =
        RegExp(r'[!@#\$%^&*()_\+\-\=\[\]{};:"\\|,.<>\/?~`]').hasMatch(v);
    if (!hasMin) return 'Password must be at least 8 characters';
    if (!hasSymbol) return 'Password must contain at least one symbol';
    return null;
  }

  bool _isValidDate(int y, int m, int d) {
    try {
      final dt = DateTime(y, m, d);
      return dt.year == y && dt.month == m && dt.day == d;
    } catch (_) {
      return false;
    }
  }

  bool _is18OrOlder(int y, int m, int d) {
    final now = DateTime.now();
    int age = now.year - y;
    if (now.month < m || (now.month == m && now.day < d)) age--;
    return age >= 18;
  }

  Future<void> _submit() async {
    setState(() => _dobError = null);
    final ok = _formKey.currentState?.validate() ?? false;
    if (!ok) return;

    final d = int.tryParse(_dayCtrl.text);
    final m = int.tryParse(_monthCtrl.text);
    final y = int.tryParse(_yearCtrl.text);

    if (d == null || m == null || y == null) {
      setState(() => _dobError = 'Enter your full date of birth');
      return;
    }
    if (!_isValidDate(y, m, d)) {
      setState(() => _dobError = 'Enter a valid date (DD/MM/YYYY)');
      return;
    }
    if (!_is18OrOlder(y, m, d)) {
      setState(() => _dobError = 'You must be 18 or older to sign up');
      return;
    }

    await Future.delayed(const Duration(milliseconds: 400));
    if (!mounted) return;
    ScaffoldMessenger.of(context)
        .showSnackBar(const SnackBar(content: Text('Account created!')));
    Navigator.pushNamedAndRemoveUntil(context, '/home', (_) => false);
  }

  @override
  Widget build(BuildContext context) {
    const fieldWidth = 320.0;
    const boxH = 56.0;

    InputDecoration dobDeco(String hint) =>
        InputDecoration(hintText: hint, counterText: '');

    return Scaffold(
      body: SlideshowBackground(
        child: SafeArea(
          child: Stack(
            children: [
              Align(
                alignment: Alignment.topLeft,
                child: IconButton(
                  icon: const Icon(Icons.arrow_back, color: Colors.white),
                  onPressed: () => Navigator.pop(context),
                ),
              ),
              Center(
                child: SingleChildScrollView(
                  padding: const EdgeInsets.symmetric(
                      horizontal: 24, vertical: 16),
                  child: Form(
                    key: _formKey,
                    child: Column(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        // Raised logo on Sign-Up
                        const TourioLogo(width: 250, dy: -26),
                        const SizedBox(height: 24),
                        ConstrainedBox(
                          constraints:
                              const BoxConstraints(maxWidth: fieldWidth),
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              TextFormField(
                                controller: _usernameCtrl,
                                decoration: const InputDecoration(
                                    labelText: 'Username'),
                                validator: _validateUsername,
                                textInputAction: TextInputAction.next,
                              ),
                              const SizedBox(height: 12),
                              TextFormField(
                                controller: _emailCtrl,
                                keyboardType: TextInputType.emailAddress,
                                decoration:
                                    const InputDecoration(labelText: 'Email'),
                                validator: _validateEmail,
                                textInputAction: TextInputAction.next,
                              ),
                              const SizedBox(height: 12),
                              _ObscuredTextField(
                                controller: _pwCtrl,
                                label: 'Password',
                                validator: _validatePassword,
                              ),
                              const SizedBox(height: 14),
                              Text(
                                'Date of Birth',
                                style: Theme.of(context)
                                    .textTheme
                                    .labelLarge
                                    ?.copyWith(color: Colors.white),
                              ),
                              const SizedBox(height: 6),
                              Row(
                                children: [
                                  // DD
                                  SizedBox(
                                    width: 70,
                                    height: boxH,
                                    child: TextField(
                                      controller: _dayCtrl,
                                      focusNode: _dayNode,
                                      textAlign: TextAlign.center,
                                      keyboardType: TextInputType.number,
                                      inputFormatters: [
                                        FilteringTextInputFormatter
                                            .digitsOnly,
                                        LengthLimitingTextInputFormatter(2),
                                      ],
                                      decoration: dobDeco('DD'),
                                      onChanged: (v) {
                                        if (v.length == 2) {
                                          FocusScope.of(context)
                                              .requestFocus(_monthNode);
                                        }
                                      },
                                    ),
                                  ),
                                  const SizedBox(width: 10),
                                  // MM
                                  SizedBox(
                                    width: 70,
                                    height: boxH,
                                    child: TextField(
                                      controller: _monthCtrl,
                                      focusNode: _monthNode,
                                      textAlign: TextAlign.center,
                                      keyboardType: TextInputType.number,
                                      inputFormatters: [
                                        FilteringTextInputFormatter
                                            .digitsOnly,
                                        LengthLimitingTextInputFormatter(2),
                                      ],
                                      decoration: dobDeco('MM'),
                                      onChanged: (v) {
                                        if (v.length == 2) {
                                          FocusScope.of(context)
                                              .requestFocus(_yearNode);
                                        }
                                      },
                                    ),
                                  ),
                                  const SizedBox(width: 10),
                                  // YYYY
                                  SizedBox(
                                    width: 110,
                                    height: boxH,
                                    child: TextField(
                                      controller: _yearCtrl,
                                      focusNode: _yearNode,
                                      textAlign: TextAlign.center,
                                      keyboardType: TextInputType.number,
                                      inputFormatters: [
                                        FilteringTextInputFormatter
                                            .digitsOnly,
                                        LengthLimitingTextInputFormatter(4),
                                      ],
                                      decoration: dobDeco('YYYY'),
                                    ),
                                  ),
                                ],
                              ),
                              if (_dobError != null) ...[
                                const SizedBox(height: 6),
                                Text(
                                  _dobError!,
                                  style: const TextStyle(
                                      color: Color(0xFFFFE082), fontSize: 12.5),
                                ),
                              ],
                              const SizedBox(height: 18),
                              FrostButton(
                                  onPressed: _submit,
                                  label: 'CREATE ACCOUNT'),
                            ],
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
